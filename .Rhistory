res_knn <- c(
0.7918860, 0.7940789, 0.7980263 ,0.7971491, 0.7907895, 0.7945175 ,0.8703947 ,0.8633772 ,0.8603070 ,0.8589912 ,0.8557018,
0.8517544,
0.8701754 ,0.8662281 ,0.8629386, 0.8638158 ,0.8592105 ,0.8567982, 0.8699561 ,0.8618421 ,0.8605263 ,0.8572368 ,0.8548246,
0.8530702,
0.8686404, 0.8605263 ,0.8600877 ,0.8578947, 0.8539474, 0.8486842)
precision <- matrix(res_knn,ncol=length(features))
matplot(precision, type = c("b"),pch=1,col = 1:length(features),  xlab = "Neighbours", ylab="Accuracy", main="KNN ACCUARCY")
legend("left", legend = features, col=1:length(features), pch=1, title="Features")
features <- c(3,10,50,100,150)
precision <- matrix(res_knn,ncol=length(features))
matplot(precision, type = c("b"),pch=1,col = 1:length(features),  xlab = "Neighbours", ylab="Accuracy", main="KNN ACCUARCY")
legend("left", legend = features, col=1:length(features), pch=1, title="Features")
time_svm <- c(9.517319,  7.648561, 25.033115, 58.825680, 95.674626)
#[1]  9.517319  7.648561 25.033115 58.825680 95.674626
res_svm <- c(0.6857456, 0.8225877, 0.8407895, 0.8245614, 0.8245614)
plot(res_svm, type = c("b"),pch=1 , xlab = "Features", ylab="Precision", main="SVM ACCURACY", xaxt = "n")
axis(1, at=1:length(features), labels=features)
legend("right", legend = features, col=1:length(features), pch=1, title="Features")
plot(time_svm, type = c("b"),pch=1 , xlab = "Features", ylab="Execution time (s)", main="SVM EXECUTION TIME", xaxt = "n")
axis(1, at=1:length(features), labels=features)
time_svm <- c(9.517319,  7.648561, 25.033115, 58.825680, 95.674626)
#[1]  9.517319  7.648561 25.033115 58.825680 95.674626
res_svm <- c(0.6857456, 0.8225877, 0.8407895, 0.8245614, 0.8245614)
plot(res_svm, type = c("b"),pch=1 , xlab = "Features", ylab="Precision", main="SVM ACCURACY", xaxt = "n")
axis(1, at=1:length(features), labels=features)
res_svm  <- c(0.6754386, 0.8802632, 0.9164474, 0.9195175, 0.9151316)
plot(res_svm, type = c("b"),pch=1 , xlab = "Features", ylab="Precision", main="SVM ACCURACY", xaxt = "n")
axis(1, at=1:length(features), labels=features)
y_train <- to_categorical(training_labels_vector, length(fruits))
y_test <- to_categorical(test_labels_vector, length(fruits))
x_train<-array_reshape(training_features_matrix,c(nrow(training_features_matrix),dim,dim,1))
library(jpeg)
library(imager)
library(class)
library(e1071)
library(FactoMineR)
library(factoextra)
library(keras)
library(tensorflow)
read_fruit_rgb <- function(path,set,fruit, dim = 50){
filenames <- list.files(paste(path,set,fruit,sep=""), pattern = "*.jpg")
images_rgb= list()
i = 1
for (name in  filenames){
path_name = paste(path,set,fruit,"/",name,sep="")
img <- load.image(path_name)
inmg <- resize(img,dim,dim)
images_rgb[[i]] = as.vector(img)
i = i+1
}
return(images_rgb)
}
#number of pixels to be used
dim = 50
path = "../fruits-360_dataset/fruits-360/"
set = "Training/"
training_labels_vector <- NULL
#fruits = c ("Apricot","Banana", "Blueberry")
fruits = c ("Apple Golden 1", "Apple Golden 2", "Apple Red 2","Apple Red 1", "Banana", "Apricot", "Blueberry")
i = 0
training_features_matrix_rgb <- NULL
for (fruit in fruits){
images_rgb <- read_fruit_rgb(path,set,fruit)
images_rgb <- matrix(unlist(images_rgb), ncol = dim*dim*3, byrow = TRUE)
labels <-replicate(dim(images_rgb)[1], i)
training_labels_vector <- c(training_labels_vector,labels)
training_features_matrix_rgb <- rbind(training_features_matrix_rgb,images_rgb)
i <- i +1
}
dim(training_features_matrix_rgb)
13648*100*100
136480000*3
13648*7500
